name: CI
on:
  push:
    branches:
      - main
    paths:
      - "classifier*.py"
      - "Dockerfile"
      - "Pipfile"
      - "Pipfile.lock"
      - "requirements.txt"
      - "test/**"
      - "data/*.json"
      - ".github/workflows/ci.yml"
  pull_request:
    branches:
      - main
    paths:
      - "classifier*.py"
      - "Dockerfile"
      - "Pipfile"
      - "Pipfile.lock"
      - "requirements.txt"
      - "test/**"
      - "data/*.json"
      - ".github/workflows/ci.yml"
  workflow_dispatch:

jobs:
  analyze:
    name: analyze
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  build:
    runs-on: ubuntu-latest
    needs: [analyze]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        lfs: 'true'
    - name: Set Tag Name
      run: |
        echo "TAG=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "DATE=v$(echo `date +'%Y.%m'`)" >> $GITHUB_ENV
    - name: Run Trivy config vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: "config"
        scan-ref: "."
    - name: Create models
      if: ${{ env.TAG }}
      env:
        NOTEBOOK_TIMEOUT: "1400"
      run: |
        docker run -v $PWD:/app:rw -w "/app" -u root docker.io/jupyter/datascience-notebook:2023-10-20 bash ./scripts/run.sh
    - name: Cache multiple paths
      uses: actions/cache@v4
      if: ${{ env.TAG }}
      with:
        key: ${{ runner.os }}-${{ env.TAG }}-${{ hashFiles('data/news.json') }}
        path: |
          ${{ github.workspace }}/data/*
    - name: Create sha256sum
      run: |
        cd data/
        for f in *.xz; do echo `sha256sum $f` > $f.sha256sum; done
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker image - tag
      uses: docker/build-push-action@v5
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: .
        push: true
        tags: docker.io/saidsef/ml-classifier:${{ env.TAG == 'main' && 'latest' || env.TAG }}
        cache-from: type=registry,ref=docker.io/saidsef/ml-classifier:${{ env.TAG == 'main' && 'latest' || env.TAG }}
        cache-to: type=inline
    - name: Build and push Docker image - tag
      uses: docker/build-push-action@v5
      if: ${{ contains(github.ref, 'main') }}
      env:
        DOCKER_BUILDKIT: 1
      with:
        context: .
        push: true
        tags: docker.io/saidsef/ml-classifier:${{ env.DATE }}
        cache-from: type=registry,ref=docker.io/saidsef/ml-classifier:${{ env.DATE }}
        cache-to: type=inline
    - name: Run Trivy vulnerability scanner - Server
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: docker.io/saidsef/ml-classifier:${{ env.TAG == 'main' && 'latest' || env.TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab - Server
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  k8s-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.10.0
        with:
          verbosity: "10"
          kubectl_version: "v1.29.3"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run K8s test
        run: |
          kubectl version
          export NS=`cat deployment/kustomization.yml  | grep namespace | awk '{ print $2 }'`
          if [ -z "$NS" ]; then
            export NS='web'
          fi
          kubectl create namespace $NS
          kubectl apply -n $NS -k deployment/
          kubectl get all -A

  auto-approve:
    runs-on: ubuntu-latest
    needs: [build, k8s-test]
    if: ${{ github.event_name == 'pull_request' }}
    steps:
    - name: Auto Approve PR
      uses: actions/github-script@v7
      with:
       script: |
        github.rest.pulls.createReview({
          owner: context.repo.owner,
          repo: context.repo.repo,
          pull_number: context.issue.number,
          event: "APPROVE"
        })
